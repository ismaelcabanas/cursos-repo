/*
Groovy has another way to declare functions called closures. Closures have
two interesting features. First, they are just values that can be assigned to
a variable, just like a number or a string. Second, they can capture variables
from the scope in which they're declared.
*/

task groovy {}

def foo = "One million dollars"
def myClosure = {
    println "Hello from a closure"
    println "The value of foo is $foo"
}

myClosure()
def bar = myClosure
def baz = bar
baz()

/*
Closures have a different notation for arguments.
*/

def doubleIt = { x -> x + x}

/*
Groovy also allows for higher order functions. That is, functions that take
functions as arguments. Let's make a function that applies another function
twice.
*/

def applyTwice(func, arg){
    func(func(arg))
}

foo = 5
def fooDoubledTwice = applyTwice(doubleIt, foo)
println "Applying doubleIt twice to $foo equals $fooDoubledTwice"
