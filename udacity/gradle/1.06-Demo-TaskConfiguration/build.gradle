/*
Now that we have some Groovy under our belts, we're in a much better position
to understand what's going on in a Gradle build script. Just like a closure
can have a delegate object, the entire build script delegates to a project
object. All the keywords in the Gradle DSL are properties of, or methods on,
the project object.
For instance, the project object has a method called `task` for declaring
tasks. It accepts a name of a new task and a configuration closure, which
we'll talk about shortly.
*/

project.task("myTask1")

/*
Since the entire build script delegates to `project`, we can leave that
off.
*/

task("myTask2")

/*
Because Groovy syntax is awesome, we can leave off the parentheses.
*/

task "myTask3"

/*
This next part is a little tricky. Gradle uses an advanced Groovy feature to
change how the syntax of task declaration is compiled. The upshot is that we
can knock off the quotes.
For more info, check out Mark's post on Stack Overflow here:
http://stackoverflow.com/questions/27584463/understing-the-groovy-syntax-in-a-gradle-task-definition
*/

task myTask4

/*
Here we have the standard way to declare a task. Since the task is a Groovy
object we can set its properties and access its methods. Let's add a
description and a group to this task.
*/

myTask4.description = "This is what's shown in the task list"
myTask4.group = "This is the heading for this task in the task list,"
